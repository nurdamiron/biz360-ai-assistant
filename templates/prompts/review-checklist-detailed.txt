Сгенерируйте подробный чеклист для код-ревью на основе предоставленной информации об изменениях.

# Основная информация
- Ветка источник (head): {{headBranch}}
- Целевая ветка (base): {{baseBranch}}
- URL репозитория: {{repositoryUrl}}
{{#if taskId}}
- ID задачи: {{taskId}}
{{/if}}

# Статистика изменений
- Всего измененных файлов: {{changedFiles.length}}

# Типы изменений
{{#if changes.hasJsChanges}}
- JavaScript/TypeScript файлы
{{/if}}
{{#if changes.hasCssChanges}}
- CSS/SCSS/LESS файлы
{{/if}}
{{#if changes.hasHtmlChanges}}
- HTML/шаблоны
{{/if}}
{{#if changes.hasTestChanges}}
- Тесты
{{/if}}
{{#if changes.hasConfigChanges}}
- Конфигурационные файлы
{{/if}}
{{#if changes.hasBackendChanges}}
- Backend файлы
{{/if}}

# Изменения в файлах
{{#each fileContents}}
## {{this.file}}
```diff
{{this.diff}}
```

{{/each}}

# Инструкции:
1. Создайте детальный и исчерпывающий чеклист для код-ревью, специфичный для предоставленных изменений.

2. Чеклист должен включать следующие основные категории:
   - **Функциональность** - проверки соответствия требованиям и правильности работы
   - **Архитектура и дизайн** - проверки соответствия архитектурным принципам и паттернам
   - **Качество кода** - читаемость, поддерживаемость, понятность
   - **Производительность** - эффективность и оптимизация
   - **Безопасность** - потенциальные уязвимости и проблемы безопасности
   - **Тестирование** - наличие и качество тестов
   - **Документация** - комментарии, документация API, README
   - **Совместимость** - совместимость с разными браузерами, устройствами, версиями API

3. В каждой категории предоставьте конкретные пункты проверки, относящиеся к коду:
   - Включите как минимум 5-7 пунктов для каждой применимой категории
   - Формулируйте вопросы так, чтобы на них можно было ответить "Да/Нет/Не применимо"
   - Где возможно, ссылайтесь на конкретные файлы или участки кода из изменений

4. Адаптируйте чеклист для конкретных типов файлов в изменениях:
   {{#if changes.hasJsChanges}}
   - Добавьте специфичные для JavaScript/TypeScript проверки (типизация, обработка ошибок, асинхронность)
   {{/if}}
   {{#if changes.hasCssChanges}}
   - Добавьте специфичные для CSS проверки (адаптивность, кроссбраузерность, производительность)
   {{/if}}
   {{#if changes.hasHtmlChanges}}
   - Добавьте специфичные для HTML проверки (доступность, семантика, SEO)
   {{/if}}
   {{#if changes.hasTestChanges}}
   - Добавьте проверки качества и покрытия тестов
   {{/if}}
   {{#if changes.hasConfigChanges}}
   - Добавьте проверки безопасности и правильности конфигурации
   {{/if}}
   {{#if changes.hasBackendChanges}}
   - Добавьте проверки для серверного кода (обработка ошибок, безопасность, производительность)
   {{/if}}

5. Для каждого пункта:
   - Сформулируйте чёткий и конкретный вопрос
   - Добавьте краткое объяснение, почему это важно (при необходимости)
   - Укажите, является ли пункт обязательным или рекомендацией

Ответ должен быть в формате Markdown, с четким разделением категорий и пунктов для проверки. Используйте чекбоксы, заголовки и другие элементы форматирования для улучшения читаемости.