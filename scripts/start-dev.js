// src/scripts/start-dev.js

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
 * - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü
 * - –ó–∞–ø—É—Å–∫–∞–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
 * - –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä —Å nodemon –¥–ª—è –≥–æ—Ä—è—á–µ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
 */

require('dotenv').config();
const { spawn } = require('child_process');
const mysql = require('mysql2/promise');
const logger = require('../utils/logger');
const fs = require('fs');
const path = require('path');

// –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  red: '\x1b[31m',
  cyan: '\x1b[36m'
};

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
  console.log(`${colors.bright}${colors.cyan}=== Biz360 CRM AI Assistant - Dev Mode ===${colors.reset}\n`);
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞
    if (!fs.existsSync(path.join(process.cwd(), '.env'))) {
      console.log(`${colors.yellow}‚ö†Ô∏è –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω${colors.reset}`);
      console.log(`–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –Ω–∞ –æ—Å–Ω–æ–≤–µ .env.example:\n`);
      console.log(`${colors.bright}cp .env.example .env${colors.reset}\n`);
      process.exit(1);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const requiredEnvVars = ['DB_HOST', 'DB_USER', 'DB_PASSWORD', 'DB_NAME', 'LLM_API_KEY'];
    const missingVars = requiredEnvVars.filter(varName => !process.env[varName]);
    
    if (missingVars.length > 0) {
      console.log(`${colors.yellow}‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:${colors.reset} ${missingVars.join(', ')}`);
      console.log(`–î–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ —Ñ–∞–π–ª .env –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞\n`);
      process.exit(1);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    console.log(`${colors.cyan}üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL...${colors.reset}`);
    
    try {
      // –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MySQL
      const connection = await mysql.createConnection({
        host: process.env.DB_HOST,
        port: process.env.DB_PORT || 3306,
        user: process.env.DB_USER,
        password: process.env.DB_PASSWORD
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const [rows] = await connection.query(
        `SHOW DATABASES LIKE '${process.env.DB_NAME}'`
      );
      
      if (rows.length === 0) {
        console.log(`${colors.yellow}‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '${process.env.DB_NAME}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç${colors.reset}`);
        console.log(`–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...`);
        
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–∫—Ä–∏–ø—Ç–æ–≤ –ë–î, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if (!fs.existsSync(path.join(process.cwd(), 'database'))) {
          fs.mkdirSync(path.join(process.cwd(), 'database'));
        }
        
        // –ö–æ–ø–∏—Ä—É–µ–º SQL —Å–∫—Ä–∏–ø—Ç –µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç
        const schemaPath = path.join(process.cwd(), 'database', 'schema.sql');
        if (!fs.existsSync(schemaPath)) {
          fs.copyFileSync(
            path.join(__dirname, 'db-schema.sql'), 
            schemaPath
          );
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ë–î
        console.log(`${colors.cyan}üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...${colors.reset}`);
        await runProcess('node', [path.join(__dirname, 'db-init.js')]);
      } else {
        console.log(`${colors.green}‚úì –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '${process.env.DB_NAME}' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç${colors.reset}`);
      }
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      await connection.end();
      
    } catch (error) {
      console.log(`${colors.red}‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${error.message}${colors.reset}`);
      process.exit(1);
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    console.log(`\n${colors.cyan}üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...${colors.reset}`);
    console.log(`${colors.bright}–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n${colors.reset}`);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º nodemon
    runProcess('npx', ['nodemon', 'src/index.js'], true);
    
  } catch (error) {
    console.log(`${colors.red}‚ùå –û—à–∏–±–∫–∞: ${error.message}${colors.reset}`);
    process.exit(1);
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–æ—á–µ—Ä–Ω–∏–π –ø—Ä–æ—Ü–µ—Å—Å
 * @param {string} command - –ö–æ–º–∞–Ω–¥–∞
 * @param {Array<string>} args - –ê—Ä–≥—É–º–µ–Ω—Ç—ã
 * @param {boolean} wait - –ñ–¥–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–ª–∏ –Ω–µ—Ç
 * @returns {Promise<void>}
 */
function runProcess(command, args, wait = false) {
  return new Promise((resolve, reject) => {
    const child = spawn(command, args, { 
      stdio: wait ? 'inherit' : 'pipe',
      shell: true
    });
    
    if (!wait) {
      let stdout = '';
      let stderr = '';
      
      child.stdout?.on('data', (data) => {
        stdout += data.toString();
      });
      
      child.stderr?.on('data', (data) => {
        stderr += data.toString();
      });
      
      child.on('close', (code) => {
        if (code === 0) {
          resolve(stdout);
        } else {
          reject(new Error(`Process exited with code ${code}: ${stderr}`));
        }
      });
    } else {
      // –ï—Å–ª–∏ wait=true, –ø—Ä–æ—Å—Ç–æ –∂–¥–µ–º –ø–æ–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è —Å–∞–º
      // (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–º–µ—Ç Ctrl+C)
      resolve();
    }
    
    child.on('error', (err) => {
      reject(err);
    });
  });
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
main().catch(error => {
  console.error(`${colors.red}‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}${colors.reset}`);
  process.exit(1);
});